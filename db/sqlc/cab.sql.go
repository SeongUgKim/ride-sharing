// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: cab.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createCab = `-- name: CreateCab :one
INSERT INTO cabs (
  id,
  cab_type,
  reg_no
) VALUES (
  $1, $2, $3
) RETURNING id, cab_type, reg_no, created_at
`

type CreateCabParams struct {
	ID      uuid.UUID `json:"id"`
	CabType string    `json:"cab_type"`
	RegNo   uuid.UUID `json:"reg_no"`
}

func (q *Queries) CreateCab(ctx context.Context, arg CreateCabParams) (Cab, error) {
	row := q.db.QueryRowContext(ctx, createCab, arg.ID, arg.CabType, arg.RegNo)
	var i Cab
	err := row.Scan(
		&i.ID,
		&i.CabType,
		&i.RegNo,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCab = `-- name: DeleteCab :exec
DELETE FROM cabs WHERE id = $1
`

func (q *Queries) DeleteCab(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCab, id)
	return err
}

const getCab = `-- name: GetCab :one
SELECT id, cab_type, reg_no, created_at FROM cabs
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCab(ctx context.Context, id uuid.UUID) (Cab, error) {
	row := q.db.QueryRowContext(ctx, getCab, id)
	var i Cab
	err := row.Scan(
		&i.ID,
		&i.CabType,
		&i.RegNo,
		&i.CreatedAt,
	)
	return i, err
}

const updateCab = `-- name: UpdateCab :one
UPDATE cabs
SET cab_type = $2
WHERE id = $1
RETURNING id, cab_type, reg_no, created_at
`

type UpdateCabParams struct {
	ID      uuid.UUID `json:"id"`
	CabType string    `json:"cab_type"`
}

func (q *Queries) UpdateCab(ctx context.Context, arg UpdateCabParams) (Cab, error) {
	row := q.db.QueryRowContext(ctx, updateCab, arg.ID, arg.CabType)
	var i Cab
	err := row.Scan(
		&i.ID,
		&i.CabType,
		&i.RegNo,
		&i.CreatedAt,
	)
	return i, err
}
