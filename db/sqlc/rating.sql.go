// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: rating.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createRating = `-- name: CreateRating :one
INSERT INTO ratings (
 id,
 customer_id,
 driver_id,
 trip_id,
 rating,
 feedback
) VALUES (
  $1, $2, $3, $4, $5, $6
) RETURNING id, customer_id, driver_id, trip_id, rating, feedback
`

type CreateRatingParams struct {
	ID         uuid.UUID      `json:"id"`
	CustomerID uuid.UUID      `json:"customer_id"`
	DriverID   uuid.UUID      `json:"driver_id"`
	TripID     uuid.UUID      `json:"trip_id"`
	Rating     int64          `json:"rating"`
	Feedback   sql.NullString `json:"feedback"`
}

func (q *Queries) CreateRating(ctx context.Context, arg CreateRatingParams) (Rating, error) {
	row := q.db.QueryRowContext(ctx, createRating,
		arg.ID,
		arg.CustomerID,
		arg.DriverID,
		arg.TripID,
		arg.Rating,
		arg.Feedback,
	)
	var i Rating
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.DriverID,
		&i.TripID,
		&i.Rating,
		&i.Feedback,
	)
	return i, err
}

const deleteRating = `-- name: DeleteRating :exec
DELETE FROM ratings
WHERE customer_id = $1 AND driver_id = $2 AND trip_id = $3
`

type DeleteRatingParams struct {
	CustomerID uuid.UUID `json:"customer_id"`
	DriverID   uuid.UUID `json:"driver_id"`
	TripID     uuid.UUID `json:"trip_id"`
}

func (q *Queries) DeleteRating(ctx context.Context, arg DeleteRatingParams) error {
	_, err := q.db.ExecContext(ctx, deleteRating, arg.CustomerID, arg.DriverID, arg.TripID)
	return err
}

const getRating = `-- name: GetRating :one
SELECT id, customer_id, driver_id, trip_id, rating, feedback FROM ratings
WHERE customer_id = $1 AND driver_id = $2 AND trip_id = $3
`

type GetRatingParams struct {
	CustomerID uuid.UUID `json:"customer_id"`
	DriverID   uuid.UUID `json:"driver_id"`
	TripID     uuid.UUID `json:"trip_id"`
}

func (q *Queries) GetRating(ctx context.Context, arg GetRatingParams) (Rating, error) {
	row := q.db.QueryRowContext(ctx, getRating, arg.CustomerID, arg.DriverID, arg.TripID)
	var i Rating
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.DriverID,
		&i.TripID,
		&i.Rating,
		&i.Feedback,
	)
	return i, err
}
