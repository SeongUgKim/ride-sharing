// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: driver.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createDriver = `-- name: CreateDriver :one
INSERT INTO drivers (
    id,
    username,
    hashed_password,
    full_name,
    email,
    cab_id,
    dob
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
) RETURNING id, username, hashed_password, full_name, email, cab_id, dob, password_changed_at, created_at
`

type CreateDriverParams struct {
	ID             uuid.UUID `json:"id"`
	Username       string    `json:"username"`
	HashedPassword string    `json:"hashed_password"`
	FullName       string    `json:"full_name"`
	Email          string    `json:"email"`
	CabID          uuid.UUID `json:"cab_id"`
	Dob            time.Time `json:"dob"`
}

func (q *Queries) CreateDriver(ctx context.Context, arg CreateDriverParams) (Driver, error) {
	row := q.db.QueryRowContext(ctx, createDriver,
		arg.ID,
		arg.Username,
		arg.HashedPassword,
		arg.FullName,
		arg.Email,
		arg.CabID,
		arg.Dob,
	)
	var i Driver
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.CabID,
		&i.Dob,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteDriver = `-- name: DeleteDriver :exec
DELETE FROM drivers WHERE username = $1
`

func (q *Queries) DeleteDriver(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteDriver, username)
	return err
}

const getDriver = `-- name: GetDriver :one
SELECT id, username, hashed_password, full_name, email, cab_id, dob, password_changed_at, created_at FROM drivers
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetDriver(ctx context.Context, id uuid.UUID) (Driver, error) {
	row := q.db.QueryRowContext(ctx, getDriver, id)
	var i Driver
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.CabID,
		&i.Dob,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateDriver = `-- name: UpdateDriver :one
UPDATE drivers
SET cab_id = $2
WHERE id = $1
RETURNING id, username, hashed_password, full_name, email, cab_id, dob, password_changed_at, created_at
`

type UpdateDriverParams struct {
	ID    uuid.UUID `json:"id"`
	CabID uuid.UUID `json:"cab_id"`
}

func (q *Queries) UpdateDriver(ctx context.Context, arg UpdateDriverParams) (Driver, error) {
	row := q.db.QueryRowContext(ctx, updateDriver, arg.ID, arg.CabID)
	var i Driver
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.CabID,
		&i.Dob,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}
