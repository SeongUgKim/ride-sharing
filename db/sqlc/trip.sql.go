// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: trip.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createTrip = `-- name: CreateTrip :one
INSERT INTO trips (
  id,
  customer_id,
  driver_id,
  status
) VALUES (
  $1, $2, $3, $4
) RETURNING id, customer_id, driver_id, status, created_at
`

type CreateTripParams struct {
	ID         uuid.UUID     `json:"id"`
	CustomerID uuid.UUID     `json:"customer_id"`
	DriverID   uuid.NullUUID `json:"driver_id"`
	Status     string        `json:"status"`
}

func (q *Queries) CreateTrip(ctx context.Context, arg CreateTripParams) (Trip, error) {
	row := q.db.QueryRowContext(ctx, createTrip,
		arg.ID,
		arg.CustomerID,
		arg.DriverID,
		arg.Status,
	)
	var i Trip
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.DriverID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTrip = `-- name: DeleteTrip :exec
DELETE FROM trips
WHERE customer_id = $1 AND driver_id = $2 AND status = $3
`

type DeleteTripParams struct {
	CustomerID uuid.UUID     `json:"customer_id"`
	DriverID   uuid.NullUUID `json:"driver_id"`
	Status     string        `json:"status"`
}

func (q *Queries) DeleteTrip(ctx context.Context, arg DeleteTripParams) error {
	_, err := q.db.ExecContext(ctx, deleteTrip, arg.CustomerID, arg.DriverID, arg.Status)
	return err
}

const getTrip = `-- name: GetTrip :one
SELECT id, customer_id, driver_id, status, created_at FROM trips
WHERE customer_id = $1 AND driver_id = $2
ORDER BY created_at DESC
LIMIT 1
`

type GetTripParams struct {
	CustomerID uuid.UUID     `json:"customer_id"`
	DriverID   uuid.NullUUID `json:"driver_id"`
}

func (q *Queries) GetTrip(ctx context.Context, arg GetTripParams) (Trip, error) {
	row := q.db.QueryRowContext(ctx, getTrip, arg.CustomerID, arg.DriverID)
	var i Trip
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.DriverID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const updateTrip = `-- name: UpdateTrip :one
UPDATE trips
SET status = $4
WHERE customer_id = $1 AND driver_id = $2 AND status = $3
RETURNING id, customer_id, driver_id, status, created_at
`

type UpdateTripParams struct {
	CustomerID uuid.UUID     `json:"customer_id"`
	DriverID   uuid.NullUUID `json:"driver_id"`
	Status     string        `json:"status"`
	Status_2   string        `json:"status_2"`
}

func (q *Queries) UpdateTrip(ctx context.Context, arg UpdateTripParams) (Trip, error) {
	row := q.db.QueryRowContext(ctx, updateTrip,
		arg.CustomerID,
		arg.DriverID,
		arg.Status,
		arg.Status_2,
	)
	var i Trip
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.DriverID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
